{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAIaA,EAAO,SAAAC,GAClB,OAAO,sBAAKC,UAAU,iBAAf,UACP,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACnB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCFTC,G,MAAW,SAAAR,GAAK,OAC5B,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHTM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,uBACGZ,UAAY,SACda,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwCGG,G,wDA3Cd,aAAe,IAAD,8BACb,gBAiBAH,aAAe,SAACI,GAId,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAnBxC,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IAIZ,EAAKN,aAAe,EAAKA,aAAaU,KAAlB,gBATT,E,qDAYd,WAAqB,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAET,SAAUmB,S,oBAU7C,WAAU,IAAD,EAC0BC,KAAKP,MAA/Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACZW,EAAmBrB,EAASsB,QAAO,SAAC3B,GAAD,OACxCA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYe,wBAEjD,OACC,sBAAKjC,UAAU,MAAf,UACG,mDACF,cAAC,EAAD,CACCW,YAAY,kBACZC,aAAcgB,KAAKhB,eAEpB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAtCNK,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b6c46975.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css'\n\nexport const Card = props => {\n  return <div className=\"card-container\">\n  <img alt=\"moster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n    <h2> {props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n\n  </div>\n}","import React from \"react\";\n\nimport { Card } from \"../card/card.component\";\n\nimport \"./card-list.styles.css\";\n\nexport const CardList = props => (\n\t<div className=\"card-list\">\n\t\t{props.monsters.map(monster => (\n\t\t\t<Card key={monster.id} monster={monster} />\n\t\t))}\n\t</div>\n);\n","import React from \"react\";\n\nimport \"./search-box.styles.css\";\n\n//functional components can not set state or have lifecycle method. Used for getting props and rendering html\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\t<input\n    className = \"search\"\n\t\ttype=\"search\"\n\t\tplaceholder={placeholder}\n\t\tonChange={handleChange}\n\t/>\n);\n","import { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: \"\",\n\t\t};\n    //.bind = method on any function that returns a new function where the context of \"this\" is whatever we pass to it. \n\n    this.handleChange = this.handleChange.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ monsters: users }));\n\t}\n\n  handleChange = (e) => {\n    //JS doesn't set the scope of \"this\" on functions\n\n    //ES6 arrow functions automatically binds \"this\" to the context in which in was defined, in this case, the App component, aka Lexical scoping. You can't call .bind on them. \n    this.setState({ searchField: e.target.value})\n  }\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n      <h1> Monsters Rolodex</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder=\"search monsters\"\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}